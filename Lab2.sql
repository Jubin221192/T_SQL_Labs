--Author:Snehal Mundhe 

use AdventureWorks2008R2

-- Question-(2-1)
/* Select product id, name and selling start date for all products
 that started selling after 01/01/2007 and had a black color.
 Use the CAST function to display the date only. Sort the returned
 data by the selling start date.*/

--Answer:-
select ProductID,Name,CAST(SellStartDate as date) as selldate from Production.Product
where (SellStartDate > '2007-01-01' and Color='Black')
order by SellStartDate;

--Explanation:- 
--CAST function converts value of any type into a specified type.
--Here, our goal was to convert date-hrs-min-seconds type into date_type.Hence,used CAST.
--ORDER BY statement in sql is used to sort the fetched data in 
--either ascending or descending order according to one or more columns.
--By default ORDER BY sorts the data in ascending order.
--Here, data gets sorted in Ascending order.






-- Question(2-2)
/* Retrieve the customer ID, account number, oldest order date
 and total number of orders for each customer.
 Use column aliases to make the report more presentable.
 Sort the returned data by the total number of orders in
 the descending order.*/

--Answer:-
select CustomerID,AccountNumber, MIN(CAST(OrderDate as date)) as Oldest_Order_Date, COUNT(SalesOrderID) as ToalSales
from Sales.SalesOrderHeader
group by CustomerID,AccountNumber
order by ToalSales desc;

--Explanation:-
--The GROUP BY Statement in SQL is used to arrange identical data into groups 
--with the help of some functions. It is often used with Aggregate functions.
--Here, aggregate function used is-MIN() for finding oldest order date.
--order by is used to sort the data-by default it sorts in ascending order
--to make order by to sort in descending order "desc" is used.
--CAST is used to convert date-hrs-min-seconds type to date type.
--COUNT is the aggregate function used to calculate total number of orders for
--each customer.






-- Question(2-3)
/* Write a query to select the product id, name, and list price
 for the product(s) that have the highest list price.*/

--Answer:-
select ProductID, Name, ListPrice
from Production.Product
where ListPrice =
(
select MAX(ListPrice)
from Production.Product
)

--Explanation:-
--ProductId, Name, List Price are selected for the products that have highest list price.
--highest list price is calculated with the aggregate function MAX.
--Sub query is used inside the where clause.







--Question(2-4)
/* Write a query to retrieve the total quantity sold for each product.
 Include only products that have a total quantity sold greater than
 3000. Sort the results by the total quantity sold in the descending
 order. Include the product ID, product name, and total quantity
 sold columns in the report.*/

--Answer:-
select p.ProductID, p.Name, COUNT(s.SalesOrderID) as Total_quantity_sold from
Production.Product as p LEFT OUTER JOIN 
Sales.SalesOrderDetail as s
on p.ProductID = s.ProductID
group by p.ProductID, p.Name
having COUNT(s.SalesOrderID) > 3000
order by Total_quantity_sold desc;

--Explanation:-
--Left outer join:
--The result set of a LEFT OUTER join contains all rows from both tables that meet the WHERE 
--clause criteria, same as an INNER join result set. In addition, any rows from the left table 
--that do not have a matching row that exists in the 
--right table will also be included in the result set.
--Here, product name is not present in the Sales.SalesOrderDetail 
--table therefore LEFT OUTER JOIN is used.
--SalesOrderID is generated by the company (who is selling the product to customer)
--when customer places the order. Hence SalesOrderID is used to count 
--total quantity sold for each product.(the product is sold-customer places the order
--and company sells it-SalesOrderID is generated)






-- Question(2-5)
/* Write a SQL query to generate a list of customer ID's and
 account numbers that have never placed an order before.
 Sort the list by CustomerID in the ascending order. */

--Answer:-
select CustomerID,AccountNumber
from Sales.SalesOrderHeader
where PurchaseOrderNumber IS NULL
order by CustomerID asc;
    
	--or

select CustomerID,AccountNumber
from Sales.SalesOrderHeader
where OnlineOrderFlag=1
order by CustomerID asc;


--Explanation:-
--Customers who have never placed order before can be found by
--considering either PurchaseOrderNumber or OnlineOrderFlag
--If customer has never placed order before then he/she will not have
--any PurchaseOrderNumber. Also, if the customer has not placed order
--then the OnlineOrderFlag will be set to 1 indicating that order has not 
--placed. So we can find answer using both PurchaseOrderNumber and OnlineOrderFlag







--Question(2-6)
/* Write a query to create a report containing customer id,
 first name, last name and email address for all customers.
 Sort the returned data by CustomerID. */

--Answer:-
select  p.FirstName, p.LastName, e.EmailAddress, s.CustomerID
from Person.Person as p
inner join 
Person.EmailAddress as e
on p.BusinessEntityID = e.BusinessEntityID
inner join
Sales.Customer as s
on e.BusinessEntityID = s.PersonID
order by s.CustomerID;

--Explanation:
--First Name, Last Name are present in Person.Person table.
--Email Address is present in Person.EmailAddress table
--CustomerId is present in Sales.Customer table.
--Common table between Person.Person and Person.EmailAddress is 
--BusinessEntityID, so applying join between the two tables.
--Also, BusinessEntityID is same as PersonID from Sales.Customer table.
--PersonID is NULL means corresponding CustomerID has no First Name, Last Name,
--Email Address that means those customers with PersonID=NULL does not exist. 


--ENDS HERE












